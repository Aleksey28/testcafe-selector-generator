/* global getSelector */
const hammerhead     = window.getTestCafeModule('hammerhead');
const INTERNAL_ATTRS = hammerhead.PROCESSING_INSTRUCTIONS.dom.internal_attributes;
const INTERNAL_PROPS = hammerhead.PROCESSING_INSTRUCTIONS.dom.internal_props;
const iframeSandbox  = hammerhead.sandbox.iframe;
const browserUtils   = hammerhead.utils.browser;

const SelectorGenerator = window.getTestCafeModule('SelectorGenerator');
const selectorGenerator = new SelectorGenerator();
const { RULES }         = SelectorGenerator;
const { RULE_TYPE }     = RULES;

let qunitElements = null;

function startIgnoreQUnitElements () {
    qunitElements = document.getElementById('qunit-tests').querySelectorAll('*');

    for (let i = 0; i < qunitElements.length; i++) {
        const el = qunitElements[i];

        el[INTERNAL_PROPS.shadowUIElement] = true;
    }
}

function stopIgnoreQUnitElements () {
    qunitElements = document.getElementById('qunit-tests').querySelectorAll('*');

    for (let i = 0; i < qunitElements.length; i++) {
        const el = qunitElements[i];

        el[INTERNAL_PROPS.shadowUIElement] = false;
    }
}

function generateSelectors (element) {
    startIgnoreQUnitElements();

    const selectors = selectorGenerator.generate(element);

    stopIgnoreQUnitElements();

    return selectors;
}

QUnit.testStart(function () {
    document.body.setAttribute('data-new-gr-c-s-check-loaded', '');

    iframeSandbox.on(iframeSandbox.RUN_TASK_SCRIPT, window.initIFrameTestHandler);
    iframeSandbox.off(iframeSandbox.RUN_TASK_SCRIPT, iframeSandbox.iframeReadyToInitHandler);
});

QUnit.testDone(function () {
    iframeSandbox.off(iframeSandbox.RUN_TASK_SCRIPT, window.initIFrameTestHandler);
});

test('non DOM element', function () {
    deepEqual(generateSelectors(null), []);
    deepEqual(generateSelectors({}), []);
});


module('tag generation rule');

test('unique elements', function () {
    deepEqual(generateSelectors(document.documentElement), [getSelector("Selector('html')", RULE_TYPE.byTagName)]);
    deepEqual(generateSelectors(document.body), [getSelector("Selector('body')", RULE_TYPE.byTagName)]);

    deepEqual(generateSelectors(document.querySelector('header')), [
        getSelector("Selector('header')", RULE_TYPE.byTagName),
    ]);

    deepEqual(generateSelectors(document.querySelector('footer')), [
        getSelector("Selector('footer')", RULE_TYPE.byTagName),
    ]);

    deepEqual(generateSelectors(document.querySelector('main')), [
        getSelector("Selector('main')", RULE_TYPE.byTagName),
    ]);
});


module('id generation rule');

test('element with id', function () {
    const elemWithId = document.getElementById('testId');

    deepEqual(generateSelectors(elemWithId), [
        getSelector("Selector('#testId')", RULE_TYPE.byId),
        getSelector("Selector('div')", RULE_TYPE.byTagTree),
    ]);
});

test('elements with ASP autogenerated id', function () {
    let elemWithId = document.getElementById('ctl02');

    deepEqual(generateSelectors(elemWithId), [
        getSelector("Selector('div').withAttribute('id', /ctl\\d+/)", RULE_TYPE.byId),
        getSelector("Selector('div').nth(1)", RULE_TYPE.byTagTree),
    ]);

    elemWithId = document.getElementById('test1_ctl03_test2');
    deepEqual(generateSelectors(elemWithId), [
        getSelector("Selector('div').withAttribute('id', /test1_ctl\\d+_test2/)", RULE_TYPE.byId),
        getSelector("Selector('div').nth(2)", RULE_TYPE.byTagTree),
    ]);

    elemWithId = document.getElementById('test_ctl23');
    deepEqual(generateSelectors(elemWithId), [
        getSelector("Selector('div').withAttribute('id', /test_ctl\\d+/)", RULE_TYPE.byId),
        getSelector("Selector('div').nth(3)", RULE_TYPE.byTagTree),
    ]);

    elemWithId = document.getElementById('ctl00_Test');
    deepEqual(generateSelectors(elemWithId), [
        getSelector("Selector('div').withAttribute('id', /ctl\\d+_Test/)", RULE_TYPE.byId),
        getSelector("Selector('div').nth(4)", RULE_TYPE.byTagTree),
    ]);

    elemWithId = document.getElementById('ctl00_Test').nextElementSibling;
    deepEqual(generateSelectors(elemWithId), [
        getSelector("Selector('div').withAttribute('id', /ctl\\d+_te:s\\'t1_te;s\\\"t2_ctl\\d+_t\\\\e\\Ss\\St3_ctl\\d+/)", RULE_TYPE.byId),
        getSelector("Selector('div').nth(5)", RULE_TYPE.byTagTree),
    ]);
});

test('element with prohibited symbols in ID (B239137, T133746)', function () {
    const elemWithId = document.querySelector('select');

    deepEqual(generateSelectors(elemWithId), [
        getSelector("Selector('#\\\\$test\\\\:test\\\\!a\\\\\"a\\\\#a\\\\%a\\\\&a\\\\\\'a\\\\(a\\\\|a\\\\)a\\\\*a\\\\+a\\\\,a\\\\.a\\\\/a\\\\:a\\\\;a\\\\<a\\\\=a\\\\>a\\\\?a\\\\@a\\\\[a\\\\]a\\\\^a\\\\`a\\\\{a\\\\|a\\\\}a\\\\~a')", RULE_TYPE.byId),
        getSelector("Selector('select')", RULE_TYPE.byTagTree),
    ]);
});

test('spaces in ID should be escaped (GH-2942)', function () {
    let elemWithSpacedId = document.querySelector('#iframeId').nextElementSibling;

    deepEqual(generateSelectors(elemWithSpacedId), [
        getSelector("Selector('#single\\\\ space')", RULE_TYPE.byId),
        getSelector("Selector('div').nth(51)", RULE_TYPE.byTagTree),
    ]);

    elemWithSpacedId = elemWithSpacedId.nextElementSibling;

    deepEqual(generateSelectors(elemWithSpacedId), [
        getSelector("Selector('#repeated\\\\ \\\\ \\\\ \\\\ spaces')", RULE_TYPE.byId),
        getSelector("Selector('div').nth(52)", RULE_TYPE.byTagTree),
    ]);

    elemWithSpacedId = elemWithSpacedId.nextElementSibling;

    deepEqual(generateSelectors(elemWithSpacedId), [
        getSelector("Selector('#pro\\\\$hib\\\\#ited\\\\ \\\\ sym\\\\!bols\\\\ and\\\\ spa\\\\*ces')", RULE_TYPE.byId),
        getSelector("Selector('div').nth(53)", RULE_TYPE.byTagTree),
    ]);
});


module('text generation rule');

test('element with text', function () {
    const elemWithText = document.querySelector('code');

    deepEqual(generateSelectors(elemWithText), [
        getSelector("Selector('code').withText('someText')", RULE_TYPE.byText),
        getSelector("Selector('code')", RULE_TYPE.byTagTree),
    ]);
});

test('element without own text having children element', function () {
    const elemWithoutText = document.querySelector('div > div');
    const selectors       = generateSelectors(elemWithoutText);

    deepEqual(selectors, [getSelector("Selector('div').nth(6).find('div')", RULE_TYPE.byTagTree)]);
});

test('element with very long text', function () {
    const elementWithLongText = document.querySelector('label');

    deepEqual(generateSelectors(elementWithLongText), [
        getSelector("Selector('label').withText('this text is too long to generate a selector with')", RULE_TYPE.byText),
        getSelector("Selector('label')", RULE_TYPE.byTagTree),
    ]);
});

test('element with text containing non-alphanumeric characters', function () {
    const elemWithText = document.querySelector('legend');

    deepEqual(generateSelectors(elemWithText), [
        getSelector("Selector('legend').withText('alpha ( \\\" ) \\\' . # ! % @ ^ text & *')", RULE_TYPE.byText),
        getSelector("Selector('legend')", RULE_TYPE.byTagTree),
    ]);
});

test('element with text containing another element with text', function () {
    const elemWithText      = document.querySelector('ins');
    const childElemWithText = elemWithText.querySelector('ins > span');

    const parentSelectors = generateSelectors(elemWithText);
    const childSelectors  = generateSelectors(childElemWithText);

    deepEqual(parentSelectors, [
        getSelector("Selector('ins').withText('some text span text and another text')", RULE_TYPE.byText),
        getSelector("Selector('ins')", RULE_TYPE.byTagTree),
    ], 'parent selector contains only parent\'s text');

    deepEqual(childSelectors, [
        getSelector("Selector('span').withText('span text')", RULE_TYPE.byText),
        getSelector("Selector('ins span')", RULE_TYPE.byTagTree),
    ], 'child selector contains only child\'s text');
});


module('class generation rule');

test('element with class', function () {
    const elemWithClass = document.querySelector('.someClass');
    const selectors     = generateSelectors(elemWithClass);

    deepEqual(selectors, [
        getSelector("Selector('.someClass')", RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(13)", RULE_TYPE.byTagTree),
    ]);
});


module('attr generation rule');

test('img with alt', function () {
    const elemWithAlt = document.querySelector('[alt=" someAlt "]');
    const selectors   = generateSelectors(elemWithAlt);

    deepEqual(selectors, [
        getSelector("Selector('[alt=\" someAlt \"]')", RULE_TYPE.byAttr),
        getSelector("Selector('img')", RULE_TYPE.byTagTree),
    ]);
});

test('element with attributes not acceptable for selectors', function () {
    const elemWithOnclick = document.querySelector('button');
    const selectors       = generateSelectors(elemWithOnclick);

    deepEqual(selectors, [getSelector("Selector('button')", RULE_TYPE.byTagTree)]);
});

test('elements with attr within element with id', function () {
    const elemWithName        = document.querySelector('#parentDivId > div');
    const anotherElemWithName = document.querySelector('#childDivId > div');

    const selectors        = generateSelectors(elemWithName);
    const anotherSelectors = generateSelectors(anotherElemWithName);

    deepEqual(selectors, [
        getSelector("Selector('#parentDivId [name=\"divName\"]')", RULE_TYPE.byAttr, RULE_TYPE.byId),
        getSelector("Selector('#parentDivId div')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('[name=\"divName\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(23).find('div')", RULE_TYPE.byTagTree),
    ]);

    deepEqual(anotherSelectors, [
        getSelector("Selector('#childDivId [name=\"anotherDivName\"]')", RULE_TYPE.byAttr, RULE_TYPE.byId),
        getSelector("Selector('#childDivId div')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('[name=\"anotherDivName\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(23).find('div').nth(1).find('div')", RULE_TYPE.byTagTree),
    ]);
});

test('element with TestCafe attributes', function () {
    const hammerheadUrlAttr       = 'href' + INTERNAL_ATTRS.storedAttrPostfix;
    const hammerheadDataHoverAttr = 'data-hover' + INTERNAL_ATTRS.storedAttrPostfix;
    const hammerheadDataFocusAttr = 'data-focus' + INTERNAL_ATTRS.storedAttrPostfix;

    const divWithHammerheadAttr = document.querySelector('.with-attr');

    divWithHammerheadAttr.setAttribute(hammerheadUrlAttr, 'value');
    divWithHammerheadAttr.setAttribute(hammerheadDataHoverAttr, '');
    divWithHammerheadAttr.setAttribute(hammerheadDataFocusAttr, true);

    const selectors = generateSelectors(divWithHammerheadAttr);

    deepEqual(selectors, [
        getSelector("Selector('.with-attr')", RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(27)", RULE_TYPE.byTagTree),
    ]);
});

test('element with Google Analytics attribute', function () {
    const divWithGAAttr = document.querySelector('.with-attr');

    divWithGAAttr.setAttribute('data-ga-click', '(Logged out) Header, clicked Sign up, text:sign-up');

    const selectors = generateSelectors(divWithGAAttr);

    deepEqual(selectors, [
        getSelector("Selector('.with-attr')", RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(27)", RULE_TYPE.byTagTree),
    ]);
});

test('element with attr with too long value', function () {
    const element   = document.querySelector('[data-city]');
    const selectors = generateSelectors(element);

    deepEqual(selectors, [
        getSelector("Selector('[class^=\"Krungthepmahanakhon Amornrattanakosin Mahintharayu\"]')", RULE_TYPE.byClassAttr),
        getSelector("Selector('[data-city^=\"Krungthepmahanakhon Amornrattanakosin Mahintharayu\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(21)", RULE_TYPE.byTagTree),
    ]);
});

test('element with attr with too long value and starts with a space', function () {
    const element       = document.querySelector('[class=" dxICheckBox_V5 dxichSys dx-not-acc dxWeb_edtCheckBoxUnchecked_V5"');
    const selectors     = generateSelectors(element);
    const selector      = selectors.find(sel => sel.rules.includes(RULE_TYPE.byClassAttr));
    const selectorValue = selector.value;
    const cssSelector   = selectorValue.match(/\[.*\]/)[0];

    strictEqual(document.querySelector(cssSelector), element);
});

test('element with ASP autogenerated attr', function () {
    let elemWithAutoganaratedAttr = document.querySelector('input');
    let selectors                 = generateSelectors(elemWithAutoganaratedAttr);

    deepEqual(selectors, [
        getSelector("Selector('input').withAttribute('name', /ctl\\d+\\$te\\\\st1\\$te\\'s\\St\\S2\\$ctl\\d+\\$te:st3\\$ctl\\d+/)", RULE_TYPE.byAttr),
        getSelector("Selector('input')", RULE_TYPE.byTagTree),
    ]);

    elemWithAutoganaratedAttr = document.querySelectorAll('input')[1];
    selectors                 = generateSelectors(elemWithAutoganaratedAttr);

    deepEqual(selectors, [
        getSelector("Selector('input').withAttribute('class', /ctl\\d+\\$te\\\\st1\\$te\\'s\\St\\S2\\$ctl\\d+\\$te:st3\\$ctl\\d+/)", RULE_TYPE.byClassAttr),
        getSelector("Selector('input').nth(1)", RULE_TYPE.byTagTree),
    ]);
});

test('elements with attr containing prohibited symbols', function () {
    let element   = document.querySelector('[data-source]');
    let selectors = generateSelectors(element);

    deepEqual(selectors, [
        getSelector("Selector('div').withAttribute('data-source', /\\s+thisDiv\\s+contains\\s+separators\\s+/)", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(14)", RULE_TYPE.byTagTree),
    ]);

    element   = document.querySelector('[data-source]').nextElementSibling;
    selectors = generateSelectors(element);

    deepEqual(selectors, [
        getSelector("Selector('div').withAttribute('class', /\\s+thisDiv\\s+contains\\s+separators\\s+/)", RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(15)", RULE_TYPE.byTagTree),
    ]);
});

test('element with attr containing non-alphanumeric symbols', function () {
    const elem1 = document.querySelector('[title]');
    const elem2 = document.querySelector('[data-attr-one]');
    const elem3 = document.querySelector('[data-attr-two]');
    const elem4 = document.querySelector('[data-attr-two]').nextElementSibling;
    const elem5 = document.querySelector('[data-attr-three]');
    const elem6 = document.querySelector('[data-attr-three]').nextElementSibling;

    const selectors = generateSelectors(elem1);

    deepEqual(selectors, [
        getSelector("Selector('.s\\\\\\'o\\\\%m\\\\\"e\\\\$c\\\\:l\\\\&as\\\\\\\\s')", RULE_TYPE.byClassAttr),
        getSelector("Selector('[title=\"s\\\\\\'o%m\\\\\"e$c:l&as\\\\\\\\s\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('a')", RULE_TYPE.byTagTree),
    ], 'attribute value was escaped');

    deepEqual(generateSelectors(elem2), [
        getSelector("Selector('[class^=\"aaa\\\\\\'aaa123490\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)-_\\\\=\\\\+\\\\|\\\\/\\\\[\\\\]\\\\?\\\\.\\\\,\\\\>\\\\<\\\\~\\\\`\\\\{\\\\}name loooo\"]')", RULE_TYPE.byClassAttr),
        getSelector("Selector('[data-attr-one^=\"thisDiv\\\\\\'Contains\\\\\\'quotes\\\\\\\\and\\\\\"double\\\\\"quotes looooooo\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(16)", RULE_TYPE.byTagTree),
    ], 'attribute value was escaped and cut');

    deepEqual(generateSelectors(elem3), [
        getSelector("Selector('div').withAttribute('data-attr-two', /aaa\\'a\\s+aa123490!@#\\$%\\^&\\*\\S\\S\\-_=\\+\\|\\/\\[\\]\\?.,><~`{}name/)", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(17)", RULE_TYPE.byTagTree),
    ], 'attribute value was used for RegExp and escaped');

    deepEqual(generateSelectors(elem4), [
        getSelector("Selector('div').withAttribute('class', /aaa\\'a\\s+aa123490!@#\\$%\\^&\\*\\S\\S\\-_=\\+\\|\\/\\[\\]\\?.,><~`{}name/)", RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(18)", RULE_TYPE.byTagTree),
    ], 'class value was used for RegExp and escaped');

    deepEqual(generateSelectors(elem5), [
        getSelector("Selector('div').withAttribute('data-attr-three', /aaa\\'a\\s+aa123490!@#\\$%\\^&\\*\\S\\S\\-_=\\+\\|\\/\\[\\]\\?.,><~`{}na/)", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(19)", RULE_TYPE.byTagTree),
    ], 'attr value was used for RegExp,escaped and cut');

    deepEqual(generateSelectors(elem6), [
        getSelector("Selector('div').withAttribute('class', /aaa\\'aaa1234\\s+90!@#\\$%\\^&\\*\\S\\S\\-_=\\+\\|\\/\\[\\]\\?.,><~`{}name /)", RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(20)", RULE_TYPE.byTagTree),
    ], 'class value was used for RegExp, escaped and cut');
});

test('element with several attributes', function () {
    const elemWithSeveralAttrs = document.querySelector('.some.classes');
    const selectors            = generateSelectors(elemWithSeveralAttrs);

    deepEqual(selectors, [
        getSelector("Selector('.some.classes')", RULE_TYPE.byClassAttr),
        getSelector("Selector('[name=\"someName\"][alt=\"someAlt\"]').withAttribute('data-attr', /ыть\\s+ыть \\/ /)", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(22)", RULE_TYPE.byTagTree),
    ]);
});


module('tag tree rule');

test('element without identifiers', function () {
    const thirdI    = document.querySelectorAll('q > span > i')[2];
    const selectors = generateSelectors(thirdI);

    deepEqual(selectors, [getSelector("Selector('q span').nth(1).find('i').nth(2)", RULE_TYPE.byTagTree)]);
});


module('parent with tagName and child rule');

test('(tagName+text): element with text has a parent with unique tag', function () {
    const elemWithText = document.querySelector('header > span');
    const selectors    = generateSelectors(elemWithText);

    deepEqual(selectors, [
        getSelector("Selector('header span').withText('header text')", RULE_TYPE.byText, RULE_TYPE.byTagName),
        getSelector("Selector('header span')", RULE_TYPE.byTagTree, RULE_TYPE.byTagName),
        getSelector("Selector('span').withText('header text')", RULE_TYPE.byText),
    ]);
});

test('(tagName+class): element with class has a parent with unique tag', function () {
    const elemWithClass = document.querySelector('footer > .paragraph-class');
    const selectors     = generateSelectors(elemWithClass);

    deepEqual(selectors, [
        getSelector("Selector('footer .paragraph-class')", RULE_TYPE.byClassAttr, RULE_TYPE.byTagName),
        getSelector("Selector('footer p')", RULE_TYPE.byTagTree, RULE_TYPE.byTagName),
        getSelector("Selector('.paragraph-class')", RULE_TYPE.byClassAttr),
    ]);
});

test('(tagName+tag tree): element without identifiers has a parent with unique tag', function () {
    const elem      = document.querySelector('main > p');
    const selectors = generateSelectors(elem);

    deepEqual(selectors, [
        getSelector("Selector('main p')", RULE_TYPE.byTagTree, RULE_TYPE.byTagName),
    ]);
});


module('parent with id and child rule');

test('(id+text): element with text has a parent with id', function () {
    const elemWithText = document.querySelector('#ancestorId > div > div');

    const selectors = generateSelectors(elemWithText);

    deepEqual(selectors, [
        getSelector("Selector('#ancestorId div').withText('text').nth(1)", RULE_TYPE.byText, RULE_TYPE.byId),
        getSelector("Selector('#ancestorId div div')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('div').withText('text').nth(2)", RULE_TYPE.byText),
        getSelector("Selector('div').nth(29).find('div div')", RULE_TYPE.byTagTree),
    ]);
});

test('(id+attr): element with attr has a parent with id', function () {
    const elementWithAttr = document.querySelector('#parent-id > div > img');
    const selectors       = generateSelectors(elementWithAttr);

    deepEqual(selectors, [
        getSelector("Selector('#parent-id [alt=\"text for image\"]')", RULE_TYPE.byAttr, RULE_TYPE.byId),
        getSelector("Selector('#parent-id div img')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('[alt=\"text for image\"]').nth(1)", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(32).find('div div img')", RULE_TYPE.byTagTree),
    ]);
});

test('(id+tag tree): element without identifiers has a parent with id', function () {
    const elem      = document.querySelectorAll('#divId > div > span')[1];
    const selectors = generateSelectors(elem);

    deepEqual(selectors, [
        getSelector("Selector('#divId div span').nth(1)", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('div').nth(35).find('div span').nth(1)", RULE_TYPE.byTagTree),
    ]);
});


module('parent with class and child rule');

test('(class+text): element with text has a parent with class', function () {
    const elemWithText = document.querySelector('.class-name > div > p > span');
    const selectors    = generateSelectors(elemWithText);

    deepEqual(selectors, [
        getSelector("Selector('span').withText('text').nth(3)", RULE_TYPE.byText),
        getSelector("Selector('.class-name span').withText('text')", RULE_TYPE.byText, RULE_TYPE.byClassAttr),
        getSelector("Selector('.class-name div p span')", RULE_TYPE.byTagTree, RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(42).find('div p span')", RULE_TYPE.byTagTree),
    ]);
});

test('(class+attr): element with attr has a parent with class', function () {
    const elementWithAttr = document.querySelector('[data-test="some-data"]');
    const selectors       = generateSelectors(elementWithAttr);

    deepEqual(selectors, [
        getSelector("Selector('.child-input.class-name')", RULE_TYPE.byClassAttr),
        getSelector("Selector('.class-name .child-input.class-name')", RULE_TYPE.byClassAttr, RULE_TYPE.byClassAttr),
        getSelector("Selector('.class-name [data-test=\"some-data\"]')", RULE_TYPE.byAttr, RULE_TYPE.byClassAttr),
        getSelector("Selector('.class-name input')", RULE_TYPE.byTagTree, RULE_TYPE.byClassAttr),
        getSelector("Selector('[data-test=\"some-data\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(42).find('input')", RULE_TYPE.byTagTree),
    ]);
});

test('(class+tag tree): element without identifiers has a parent with class', function () {
    const elem      = document.querySelector('.class-name > span');
    const selectors = generateSelectors(elem);

    deepEqual(selectors, [
        getSelector("Selector('.class-name span').nth(1)", RULE_TYPE.byTagTree, RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(42).find('span').nth(1)", RULE_TYPE.byTagTree),
    ]);
});


module('parent with attr and child rule');

test('(attr+text): element with text has a parent with attr', function () {
    const elemWithText = document.querySelector('[data-parent-attr] > div');
    const selectors    = generateSelectors(elemWithText);

    deepEqual(selectors, [
        getSelector("Selector('div').withText('ancestor with attr').nth(1)", RULE_TYPE.byText),
        getSelector("Selector('[data-parent-attr=\"ancestorAttr1\"] div').withText('ancestor with attr')", RULE_TYPE.byText, RULE_TYPE.byAttr),
        getSelector("Selector('[data-parent-attr=\"ancestorAttr1\"] div')", RULE_TYPE.byTagTree, RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(37).find('div')", RULE_TYPE.byTagTree),
    ]);
});

test('(attr+attr): element with attr has a parent with attr', function () {
    const parentElement   = document.querySelector('[data-parent-attr="ancestorAttr2"]');
    const childSpans      = parentElement.querySelectorAll('span');
    const elementWithAttr = parentElement.querySelector('img');

    for (let i = 0; i < childSpans.length; i++)
        childSpans[i].textContent = '';

    const selectors = generateSelectors(elementWithAttr);


    deepEqual(selectors, [
        getSelector("Selector('[data-child-attr=\"text for image\"]').nth(1)", RULE_TYPE.byAttr),
        getSelector("Selector('[data-parent-attr=\"ancestorAttr2\"] [data-child-attr=\"text for image\"]')", RULE_TYPE.byAttr, RULE_TYPE.byAttr),
        getSelector("Selector('[data-parent-attr=\"ancestorAttr2\"] img')", RULE_TYPE.byTagTree, RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(39).find('img')", RULE_TYPE.byTagTree),
    ]);
});

test('(attr+tag tree): element without identifiers has a parent with attr', function () {
    const elem      = document.querySelectorAll('[data-parent-attr="ancestorAttr3"] > div > span')[1];
    const selectors = generateSelectors(elem);

    deepEqual(selectors, [
        getSelector("Selector('[data-parent-attr=\"ancestorAttr3\"] div span').nth(1)", RULE_TYPE.byTagTree, RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(40).find('div span').nth(1)", RULE_TYPE.byTagTree),
    ]);
});


module('selectors priority');

test('elements with text within element with id', function () {
    const elemWithId             = document.getElementById('someId');
    const elemWithText           = elemWithId.querySelector('div');
    const anotherElementWithText = elemWithId.querySelector('div > div > div > div');

    const selectors        = generateSelectors(elemWithText);
    const anotherSelectors = generateSelectors(anotherElementWithText);

    deepEqual(selectors, [
        getSelector("Selector('#someId div').withText('abracadabra')", RULE_TYPE.byText, RULE_TYPE.byId),
        getSelector("Selector('#someId div')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('div').withText('abracadabra').nth(1)", RULE_TYPE.byText),
        getSelector("Selector('div').nth(8).find('div')", RULE_TYPE.byTagTree),
    ], 'selector was generated by ancestor id and text');

    deepEqual(anotherSelectors, [
        getSelector("Selector('#someId div').withText('another abracadabra').nth(2)", RULE_TYPE.byText, RULE_TYPE.byId),
        getSelector("Selector('#someId div').nth(1).find('div div')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('div').withText('another abracadabra').nth(3)", RULE_TYPE.byText),
        getSelector("Selector('div').nth(8).find('div').nth(1).find('div div')", RULE_TYPE.byTagTree),
    ], 'selector was generated by ancestor id and text');
});

test('input element with non-unique name within form with title', function () {
    const input     = document.querySelector('form[title="someTitle"] > input.someClass');
    const selectors = generateSelectors(input);

    deepEqual(selectors, [
        getSelector("Selector('.someClass').nth(1)", RULE_TYPE.byClassAttr),
        getSelector("Selector('[name=\"someName\"]').nth(5)", RULE_TYPE.byAttr),
        getSelector("Selector('[title=\"someTitle\"] .someClass')", RULE_TYPE.byClassAttr, RULE_TYPE.byAttr),
        getSelector("Selector('[title=\"someTitle\"] [name=\"someName\"]').nth(1)", RULE_TYPE.byAttr, RULE_TYPE.byAttr),
        getSelector("Selector('[title=\"someTitle\"] input').nth(1)", RULE_TYPE.byTagTree, RULE_TYPE.byAttr),
        getSelector("Selector('form').nth(3).find('input').nth(1)", RULE_TYPE.byTagTree),
    ]);
});

test('element with class and text equal to other element class and text', function () {
    const div       = document.querySelectorAll('.class-and-text')[1];
    const selectors = generateSelectors(div);

    deepEqual(selectors, [
        getSelector("Selector('div').withText('divtext').nth(1)", RULE_TYPE.byText),
        getSelector("Selector('.class-and-text').nth(1)", RULE_TYPE.byClassAttr),
        getSelector("Selector('div').nth(45)", RULE_TYPE.byTagTree),
    ], 'selector by text is more priority');
});

// eslint-disable-next-line max-lines-per-function
test('check selectors for one div', function () {
    const table   = document.querySelector('table');
    const cell    = table.querySelector('tr > th');
    const span    = cell.querySelector('span');
    let selectors = generateSelectors(span);

    deepEqual(selectors, [
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by tag tree');

    span.setAttribute('class', 'exampleClass');
    selectors = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('.exampleClass')", RULE_TYPE.byClassAttr),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by attr');

    span.removeAttribute('class');
    span.setAttribute('name', 'spanName');
    selectors = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('[name=\"spanName\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by attr');

    span.removeAttribute('name');
    span.textContent = 'exampleText';
    selectors        = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('span').withText('exampleText')", RULE_TYPE.byText),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by text');

    span.setAttribute('id', 'exampleId');
    selectors = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('#exampleId')", RULE_TYPE.byId),
        getSelector("Selector('span').withText('exampleText')", RULE_TYPE.byText),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by id');

    span.textContent = '';
    span.removeAttribute('id');
    cell.setAttribute('class', 'parentExampleClass');
    selectors = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('.parentExampleClass span')", RULE_TYPE.byTagTree, RULE_TYPE.byClassAttr),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by ancestor class and tag tree');

    cell.removeAttribute('class');
    cell.setAttribute('name', 'parentExampleName');
    selectors = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('[name=\"parentExampleName\"] span')", RULE_TYPE.byTagTree, RULE_TYPE.byAttr),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by ancestor attr and tag tree');

    cell.removeAttribute('name');
    table.setAttribute('id', 'parentId');
    selectors = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('#parentId tbody tr th span')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by ancestor id and tag tree');

    span.setAttribute('class', 'child');
    selectors = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('#parentId .child')", RULE_TYPE.byClassAttr, RULE_TYPE.byId),
        getSelector("Selector('#parentId tbody tr th span')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('.child').nth(1)", RULE_TYPE.byClassAttr),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by ancestor id and class');

    span.removeAttribute('class');
    span.setAttribute('name', 'child-name');
    selectors = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('#parentId [name=\"child-name\"]')", RULE_TYPE.byAttr, RULE_TYPE.byId),
        getSelector("Selector('#parentId tbody tr th span')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('[name=\"child-name\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by ancestor id and attr');

    span.removeAttribute('name');
    span.textContent = 'spanText';
    selectors        = generateSelectors(span);
    deepEqual(selectors, [
        getSelector("Selector('#parentId span').withText('spanText')", RULE_TYPE.byText, RULE_TYPE.byId),
        getSelector("Selector('#parentId tbody tr th span')", RULE_TYPE.byTagTree, RULE_TYPE.byId),
        getSelector("Selector('span').withText('spanText').nth(1)", RULE_TYPE.byText),
        getSelector("Selector('table tbody tr th span')", RULE_TYPE.byTagTree),
    ], 'selector was generated by ancestor id and text');
});


module('generate selectors for iframe\'s elements');

test('selectors for iframe', function () {
    let iframe    = document.querySelector('iframe');
    let selectors = generateSelectors(iframe);

    deepEqual(selectors, [getSelector("Selector('iframe')", RULE_TYPE.byTagTree)]);

    iframe    = document.querySelector('.iframeClass');
    selectors = generateSelectors(iframe);
    deepEqual(selectors, [
        getSelector("Selector('.iframeClass')", RULE_TYPE.byClassAttr),
        getSelector("Selector('iframe').nth(1)", RULE_TYPE.byTagTree),
    ]);

    iframe    = document.querySelector('#iframeId');
    selectors = generateSelectors(iframe);
    deepEqual(selectors, [
        getSelector("Selector('#iframeId')", RULE_TYPE.byId),
        getSelector("Selector('iframe').nth(2)", RULE_TYPE.byTagTree),
    ]);
});

test('selectors for iframe\'s elements', function () {
    const iframe                = document.querySelector('iframe');
    const iframeDocument        = iframe.contentDocument;
    const iframeDocumentElement = iframeDocument.documentElement;
    let selectors               = generateSelectors(iframeDocumentElement);

    deepEqual(selectors, [getSelector("Selector('html')", RULE_TYPE.byTagName)], 'should return html');

    iframeDocument.body.setAttribute('data-new-gr-c-s-check-loaded', '');

    selectors = generateSelectors(iframeDocument.body);
    deepEqual(selectors, [getSelector("Selector('body')", RULE_TYPE.byTagName)], 'should return body');

    const iframeImg = iframeDocument.querySelector('img');

    selectors = generateSelectors(iframeImg);
    deepEqual(selectors, [getSelector("Selector('div div div img')", RULE_TYPE.byTagTree)], 'should return img');
});


module('selector count');

test('should be generated maximum 10 default selectors (least priority selectors should be excluded)', function () {
    const div       = document.getElementById('divWithId');
    const selectors = generateSelectors(div);

    deepEqual(selectors, [
        getSelector("Selector('#divWithId')", RULE_TYPE.byId),
        getSelector("Selector('#ancestorDivWithId div').withText('bla bla text').nth(1)", RULE_TYPE.byText, RULE_TYPE.byId),
        getSelector("Selector('#ancestorDivWithId .divWithClass')", RULE_TYPE.byClassAttr, RULE_TYPE.byId),
        getSelector("Selector('#ancestorDivWithId [title=\"divWithAttr\"]')", RULE_TYPE.byAttr, RULE_TYPE.byId),
        getSelector("Selector('div').withText('bla bla text').nth(3)", RULE_TYPE.byText),
        getSelector("Selector('.divWithClass')", RULE_TYPE.byClassAttr),
        getSelector("Selector('.ancestorDivWithClass div').withText('bla bla text')", RULE_TYPE.byText, RULE_TYPE.byClassAttr),
        getSelector("Selector('[title=\"divWithAttr\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('[title=\"ancestorDivWithAttr\"] div').withText('bla bla text').nth(2)", RULE_TYPE.byText, RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(46).find('div div div')", RULE_TYPE.byTagTree),
    ]);
});

module('regression tests');

// eslint-disable-next-line qunit/no-async-test, qunit/require-expect
asyncTest('element in iframe on page with cross-domain iframe (B250093)', function () {
    const sameDomainIframe  = document.querySelector('iframe');
    const crossDomainIframe = document.querySelector('.iframeClass');
    let selectors           = [];
    let errorThrown         = false;

    crossDomainIframe.src = window.getCrossDomainPageUrl('./iframe.html');

    window.QUnitGlobals.waitForIframe(crossDomainIframe)
        .then(function () {
            try {
                sameDomainIframe.contentDocument.body.setAttribute('data-new-gr-c-s-check-loaded', '');

                selectors = generateSelectors(sameDomainIframe.contentDocument.body);
                deepEqual(selectors, [getSelector("Selector('body')", RULE_TYPE.byTagName)]);
            }
            catch (err) {
                errorThrown = true;
            }

            crossDomainIframe.src = 'iframe.html';
            ok(!errorThrown, 'check that selector generating for element in iframe on page with cross-domain iframe does not lead to javascript error');
            start();
        });
});

test('we should use innerText instead of textContent - gh1213', function () {
    const elemWithText = document.querySelector('code');

    elemWithText.style.textTransform = 'uppercase';

    const expectedText = browserUtils.isIE ? 'someText' : 'SOMETEXT';

    deepEqual(generateSelectors(elemWithText), [
        getSelector("Selector('code').withText('" + expectedText + "')", RULE_TYPE.byText),
        getSelector("Selector('code')", RULE_TYPE.byTagTree),
    ]);
});

test('generator should not generate several identical nth() methods in a row - gh3238', function () {
    const div           = document.querySelector('#divNth');
    const selectorsSpan = generateSelectors(div);

    deepEqual(selectorsSpan, [
        getSelector("Selector('#divNth')", RULE_TYPE.byId),
        getSelector("Selector('div').withText('Test Nth').nth(3)", RULE_TYPE.byText),
        getSelector("Selector('.divWithClassNth')", RULE_TYPE.byClassAttr),
        getSelector("Selector('.divOfList').nth(2).find('div').withText('Test Nth')", RULE_TYPE.byText, RULE_TYPE.byClassAttr),
        getSelector("Selector('.divOfList').nth(2).find('.divWithClassNth')", RULE_TYPE.byClassAttr, RULE_TYPE.byClassAttr),
        getSelector("Selector('.divOfList').nth(2).find('[title=\"test_nth\"]')", RULE_TYPE.byAttr, RULE_TYPE.byClassAttr),
        getSelector("Selector('.divOfList').nth(2).find('div').nth(1)", RULE_TYPE.byTagTree, RULE_TYPE.byClassAttr),
        getSelector("Selector('[title=\"test_nth\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('div').nth(54).find('div div').nth(2).find('div').nth(1)", RULE_TYPE.byTagTree),
    ]);
});

test('selector generating by text raises an error - gh1310', function () {
    const svgElement = document.querySelector('svg');

    deepEqual(generateSelectors(svgElement), [
        getSelector("Selector('[data-svg=\"svg-element\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('svg')", RULE_TYPE.byTagTree),
    ]);
});

test('selector contains unescaped symbols - gh1190', function () {
    const links = document.querySelectorAll('a');
    const link  = links[links.length - 1];

    deepEqual(generateSelectors(link), [
        getSelector("Selector('a').withText('Temp')", RULE_TYPE.byText),
        getSelector("Selector('[class^=\"link link_theme_normal organic__url link_cropped_n\"]')", RULE_TYPE.byClassAttr),
        getSelector("Selector('[data-bem=\"{\\\\\"link\\\\\":{}}\"][data-log-node=\"uniq15199824464503338163\"][data-counter^=\"[\\\\\"rc\\\\\",\\\\\"http://google.com/clck/jsredir?from=google.\"]')", RULE_TYPE.byAttr),
        getSelector("Selector('a').nth(1)", RULE_TYPE.byTagTree),
    ]);
});
